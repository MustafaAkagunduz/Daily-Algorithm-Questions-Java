Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.

Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'.

 

Example 1:

Input: s = "abciiidef", k = 3
Output: 3
Explanation: The substring "iii" contains 3 vowel letters.
Example 2:

Input: s = "aeiou", k = 2
Output: 2
Explanation: Any substring of length 2 contains 2 vowels.
Example 3:

Input: s = "leetcode", k = 3
Output: 2
Explanation: "lee", "eet" and "ode" contain 2 vowels.

---------

class Solution {
    public int maxVowels(String s, int k) {
        int maxNumOfVowels = 0;
        int currentNumOfVowels = 0;
        String vowels = "aeiou";
        
        // İlk penceredeki sesli harfleri say
        for(int i = 0; i < k; i++) {
            if(vowels.indexOf(s.charAt(i)) != -1) {
                currentNumOfVowels++;
            }
        }
        maxNumOfVowels = currentNumOfVowels;
        
        // Pencereyi kaydır
        for(int i = k; i < s.length(); i++) {
            // Pencereden çıkan karakteri kontrol et
            if(vowels.indexOf(s.charAt(i-k)) != -1) {
                currentNumOfVowels--;
            }
            // Pencereye giren karakteri kontrol et
            if(vowels.indexOf(s.charAt(i)) != -1) {
                currentNumOfVowels++;
            }
            maxNumOfVowels = Math.max(currentNumOfVowels, maxNumOfVowels);
        }
        
        return maxNumOfVowels;
    }
}

------------

Mülakatçıya şu şekilde açıklayabilirsiniz:

"Bu problemde sliding window yaklaşımını kullandım. İzlediğim adımlar şöyle:

1. Öncelikle çözümün temel mantığını açıklayayım:
   - Uzunluğu k olan bir pencere kullanıyoruz ve bu pencereyi string üzerinde kaydırıyoruz
   - Her adımda pencerenin içindeki sesli harf sayısını takip ediyoruz
   - En çok sesli harf içeren penceredeki sayıyı döndürüyoruz

2. Kodun önemli parçaları:
   - İlk olarak 0'dan k'ya kadar olan ilk penceredeki sesli harfleri sayıyoruz
   - Sonra pencereyi sağa doğru kaydırırken iki şey yapıyoruz:
     * Pencereden çıkan harf sesliyse count'u bir azaltıyoruz
     * Pencereye yeni giren harf sesliyse count'u bir artırıyoruz

3. Time complexity O(n) çünkü:
   - String üzerinde sadece bir kez geçiyoruz
   - Her karakteri sadece bir kez kontrol ediyoruz
   - indexOf işlemi sabit zamanda çalışıyor çünkü vowels stringi sabit uzunlukta (5)

4. Space complexity O(1) çünkü:
   - Kullandığımız ekstra alan input size'dan bağımsız
   - Sadece birkaç integer değişken ve sabit uzunlukta bir string kullanıyoruz

Örnek üzerinde gösterebilirim:
s = 'abciiidef', k = 3 için:
- İlk pencere 'abc' -> 1 sesli
- Sonraki 'bci' -> 1 sesli
- Sonraki 'cii' -> 2 sesli
- Sonraki 'iii' -> 3 sesli  (maximum)
..."

Bu açıklamayı yaparken kod üzerinde de gösterebilirsiniz. Mülakatçı sorular sorarsa detaylı açıklamalar yapabilirsiniz.